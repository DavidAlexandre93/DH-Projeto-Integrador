def COLOR_MAP = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']

pipeline {
    agent any
    tools {
           maven 'MAVEN_HOME'
           jdk 'JAVA_HOME'
    }

    stages {

         stage('Initialize'){
            steps {
                  sh '''
                      echo "PATH = ${PATH}"
                      echo "MAVEN_HOME = ${MAVEN_HOME}"
                  '''
                  }
            }

        stage('Integration tests + Unit tests'){
            steps {
                  sh 'mvn clean install'
                  cucumber failedFeaturesNumber: -1, failedScenariosNumber: -1, failedStepsNumber: -1, fileIncludePattern: 'target/*.json', pendingStepsNumber: -1, skippedStepsNumber: -1, sortingMethod: 'ALPHABETICAL', undefinedStepsNumber: -1
            }
             post {
                  success {
                  junit 'target/surefire-reports/**/*.xml'
                   }
             }
        }

        stage('Archiving Reports') {
            steps {
                dir(path: '.') {
                   publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'target/site/jacoco/', reportFiles: 'index.html', reportName: 'Code Coverage', reportTitles: 'Code Coverage'])
                   step([$class: 'JUnitResultArchiver', testResults: 'target/surefire-reports/TEST-*.xml'])
                }
            }   
        }

        stage("build & SonarQube analysis") {
            steps {
                    withSonarQubeEnv('My SonarQube Server') {
                    sh 'mvn sonar:sonar -Dsonar.login=a11c99f38095ecc1bcf1be517a24961fe1b31261'
              }
            }
          }

        stage("Quality Gate") {
            steps {
                    timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
              }
            }
          }

  }

}
