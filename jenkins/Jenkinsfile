def COLOR_MAP = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']

pipeline {
    agent any
    tools {
           maven 'MAVEN_HOME'
           jdk 'JAVA_HOME'
    }

    stages {

         stage('Initialize'){
            steps {
                  sh '''
                      echo "PATH = ${PATH}"
                      echo "MAVEN_HOME = ${MAVEN_HOME}"
                  '''
                  }
            }

        stage('Integration tests + Unit tests'){
            steps {
                  sh 'mvn clean test'
            }
             post {
                  success {
                  junit 'target/surefire-reports/**/*.xml'
                   }
             }
        }


        stage("Code coverage") {
             steps {
                   jacoco(
                         execPattern: '**/path_to_file/jacoco.exec',
                         classPattern: '**/coverage/**',
                         sourcePattern: '**/coverage/**',
                         inclusionPattern: '**/*.class'
                         )
                   }
        }

        stage("build & SonarQube analysis") {
            steps {
                    withSonarQubeEnv('My SonarQube Server') {
                    sh 'mvn sonar:sonar -Dsonar.login=a11c99f38095ecc1bcf1be517a24961fe1b31261'
              }
            }
          }

        stage("Quality Gate") {
            steps {
                    timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
              }
            }
          }
    }

}
